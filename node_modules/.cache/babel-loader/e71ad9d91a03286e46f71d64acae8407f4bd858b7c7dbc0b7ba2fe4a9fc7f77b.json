{"ast":null,"code":"const getAuthHeaders = () => ({\n  \"Authorization\": `Token ${localStorage.getItem(\"auth_token\")}`,\n  \"Content-Type\": \"application/json\"\n});\nexport const getAllTanks = () => {\n  return fetch(\"http://localhost:8000/tanks\", {\n    headers: getAuthHeaders()\n  }).then(response => {\n    if (response.ok) {\n      return response.json();\n    } else {\n      throw new Error(\"Failed to fetch post.\");\n    }\n  });\n};\nexport const getSingleTank = async ({\n  tankId\n}) => {\n  try {\n    const response = await fetch(`http://localhost:8000/tanks/${tankId}`, {\n      headers: getAuthHeaders()\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch tank details');\n    }\n    const tankData = await response.json();\n    return tankData;\n  } catch (error) {\n    console.error('Error fetching tank details:', error);\n    throw error;\n  }\n};\nexport const getCurrentUserTanks = ({\n  token\n}) => {\n  return fetch(`http://localhost:8000/tanks?user=true`, {\n    headers: getAuthHeaders()\n  }).then(res => res.json());\n};\nexport const editTank = (tankId, updatedTankData) => {\n  return fetch(`http://localhost:8000/tanks/${tankId}`, {\n    method: \"PUT\",\n    headers: getAuthHeaders(),\n    body: JSON.stringify(updatedTankData)\n  });\n};\nexport const createTank = newTank => {\n  return fetch(\"http://localhost:8000/tanks\", {\n    method: \"POST\",\n    headers: {\n      \"Authorization\": `Token ${localStorage.getItem(\"auth_token\")}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(newTank)\n  });\n};","map":{"version":3,"names":["getAuthHeaders","localStorage","getItem","getAllTanks","fetch","headers","then","response","ok","json","Error","getSingleTank","tankId","tankData","error","console","getCurrentUserTanks","token","res","editTank","updatedTankData","method","body","JSON","stringify","createTank","newTank"],"sources":["/Users/loganwelch/workspace/trophytanks-client/src/managers/TankManager.js"],"sourcesContent":["const getAuthHeaders = () => ({\n    \"Authorization\": `Token ${localStorage.getItem(\"auth_token\")}`,\n    \"Content-Type\": \"application/json\"\n});\n\nexport const getAllTanks = () => {\n    return fetch(\"http://localhost:8000/tanks\", {\n        headers: getAuthHeaders()\n    })\n        .then((response) => {\n            if (response.ok) {\n                return response.json();\n            } else {\n                throw new Error(\"Failed to fetch post.\");\n            }\n        });\n};\n\nexport const getSingleTank = async ({ tankId }) => {\n    try {\n        const response = await fetch(`http://localhost:8000/tanks/${tankId}`, {\n            headers: getAuthHeaders()\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to fetch tank details');\n        }\n\n        const tankData = await response.json();\n        return tankData;\n    } catch (error) {\n        console.error('Error fetching tank details:', error);\n        throw error;\n    }\n};\n\nexport const getCurrentUserTanks = ({ token }) => {\n    return fetch(`http://localhost:8000/tanks?user=true`, {\n        headers: getAuthHeaders()\n    })\n        .then(res => res.json())\n};\n\nexport const editTank = (tankId, updatedTankData) => {\n    return fetch(`http://localhost:8000/tanks/${tankId}`, {\n        method: \"PUT\",\n        headers: getAuthHeaders(),\n        body: JSON.stringify(updatedTankData),\n    })\n};\n\nexport const createTank = (newTank) => {\n    return fetch(\"http://localhost:8000/tanks\", {\n        method: \"POST\",\n        headers: {\n            \"Authorization\": `Token ${localStorage.getItem(\"auth_token\")}`,\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(newTank),\n    });\n};\n\n\n"],"mappings":"AAAA,MAAMA,cAAc,GAAGA,CAAA,MAAO;EAC1B,eAAe,EAAG,SAAQC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAE,EAAC;EAC9D,cAAc,EAAE;AACpB,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC7B,OAAOC,KAAK,CAAC,6BAA6B,EAAE;IACxCC,OAAO,EAAEL,cAAc,CAAC;EAC5B,CAAC,CAAC,CACGM,IAAI,CAAEC,QAAQ,IAAK;IAChB,IAAIA,QAAQ,CAACC,EAAE,EAAE;MACb,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;IAC1B,CAAC,MAAM;MACH,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;IAC5C;EACJ,CAAC,CAAC;AACV,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAO;EAAEC;AAAO,CAAC,KAAK;EAC/C,IAAI;IACA,MAAML,QAAQ,GAAG,MAAMH,KAAK,CAAE,+BAA8BQ,MAAO,EAAC,EAAE;MAClEP,OAAO,EAAEL,cAAc,CAAC;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACO,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIE,KAAK,CAAC,8BAA8B,CAAC;IACnD;IAEA,MAAMG,QAAQ,GAAG,MAAMN,QAAQ,CAACE,IAAI,CAAC,CAAC;IACtC,OAAOI,QAAQ;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,mBAAmB,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAC9C,OAAOb,KAAK,CAAE,uCAAsC,EAAE;IAClDC,OAAO,EAAEL,cAAc,CAAC;EAC5B,CAAC,CAAC,CACGM,IAAI,CAACY,GAAG,IAAIA,GAAG,CAACT,IAAI,CAAC,CAAC,CAAC;AAChC,CAAC;AAED,OAAO,MAAMU,QAAQ,GAAGA,CAACP,MAAM,EAAEQ,eAAe,KAAK;EACjD,OAAOhB,KAAK,CAAE,+BAA8BQ,MAAO,EAAC,EAAE;IAClDS,MAAM,EAAE,KAAK;IACbhB,OAAO,EAAEL,cAAc,CAAC,CAAC;IACzBsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,eAAe;EACxC,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMK,UAAU,GAAIC,OAAO,IAAK;EACnC,OAAOtB,KAAK,CAAC,6BAA6B,EAAE;IACxCiB,MAAM,EAAE,MAAM;IACdhB,OAAO,EAAE;MACL,eAAe,EAAG,SAAQJ,YAAY,CAACC,OAAO,CAAC,YAAY,CAAE,EAAC;MAC9D,cAAc,EAAE;IACpB,CAAC;IACDoB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,OAAO;EAChC,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}